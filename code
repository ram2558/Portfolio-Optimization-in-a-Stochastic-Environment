!pip install numpy pandas matplotlib scipy


!pip install PyPortfolioOpt

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt.expected_returns import mean_historical_return
from pypfopt.risk_models import CovarianceShrinkage

# Simulating stock prices using Geometric Brownian Motion (GBM)
def simulate_gbm(S0, mu, sigma, T, dt):
    N = int(T/dt)
    t = np.linspace(0, T, N)
    W = np.random.normal(0, np.sqrt(dt), N).cumsum()
    S = S0 * np.exp((mu - 0.5 * sigma**2) * t + sigma * W)
    return S

# Simulating interest rates using the Vasicek model
def simulate_vasicek(r0, kappa, theta, sigma, T, dt):
    N = int(T/dt)
    r = np.zeros(N)
    r[0] = r0
    for t in range(1, N):
        dr = kappa * (theta - r[t-1]) * dt + sigma * np.sqrt(dt) * np.random.normal()
        r[t] = r[t-1] + dr
    return r

# Generate synthetic stock data
np.random.seed(42)
T, dt = 1, 1/252  # 1 year, daily steps
stocks = {
    'Stock A': simulate_gbm(100, 0.08, 0.2, T, dt),
    'Stock B': simulate_gbm(120, 0.1, 0.25, T, dt),
    'Stock C': simulate_gbm(80, 0.07, 0.18, T, dt)
}
interest_rates = simulate_vasicek(0.03, 0.2, 0.05, 0.02, T, dt)

# Convert to DataFrame
df = pd.DataFrame(stocks)
df.index = pd.date_range(start='2024-01-01', periods=len(df), freq='D')

# Compute expected returns and covariance matrix
mu = mean_historical_return(df)
S = CovarianceShrinkage(df).ledoit_wolf()

# Portfolio Optimization
ef = EfficientFrontier(mu, S)
ef.max_sharpe()
weights = ef.clean_weights()
print("Optimized Portfolio Weights:", weights)

# Compute Sharpe Ratio & Value-at-Risk (VaR)
returns = df.pct_change().dropna()
sharpe_ratio = (returns.mean() / returns.std()).mean()
VaR_95 = returns.quantile(0.05)

print("Sharpe Ratio:", sharpe_ratio)
print("95% Value-at-Risk (VaR):\n", VaR_95)

# Plot Stock Simulations
df.plot(figsize=(10, 5), title="Simulated Stock Prices")
plt.show()

# Plot Interest Rate Simulation
plt.figure(figsize=(10, 5))
plt.plot(interest_rates, label="Interest Rate")
plt.title("Simulated Interest Rate (Vasicek Model)")
plt.legend()
plt.show()
